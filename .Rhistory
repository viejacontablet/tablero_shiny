colnames(matrixaux)<-c("fecha")
#pego las dos base y me queda la cantidad de operativos con datos por día hasta la fecha con los que no tengo nada tmb
base_camp_aux<-left_join(matrixaux,base_camp_aux)
base_camp_aux<- convertir_na(base_camp_aux,0)
base_camp_aux$cant_dias<-as.numeric(base_camp_aux$cant_dias)
#esto if es para que me cambie de color el grafico cuando pasan muchos días
if(spam1>=7){graf_campfalt<-ggplot(base_camp_aux,mapping = aes(x=fecha, y=cant_dias))+
geom_col(fill="#670010") +
theme_classic()+
scale_x_date("")+
scale_y_continuous("Registros")}else{
graf_campfalt<-ggplot(base_camp_aux,mapping = aes(x=fecha, y=cant_dias))+
geom_col(fill="#038554") +
theme_classic()+
scale_x_date("")+
scale_y_continuous("Registros")
}
graf_campfalt<- ggplotly(graf_campfalt) %>% layout(title = "",  showlegend = F) %>%
config(modeBarButtonsToRemove=c('zoom2d', 'pan2d', 'select2d',
'lasso2d', 'zoomIn2d', 'zoomOut2d',
'autoScale2d','resetScale2d'))
graf_campfalt <- graf_campfalt %>% layout(title = "",  showlegend = F)
### Metodos anticonceptivos-----------------
metodos <- read.csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vQhUJ_P05qmjRHFDibfuCgASOmxYnaljEiRlNbDCuh7sVxjbuH0kbVv2qZ_uEwyrh3w0uBhr8wN2xG6/pub?gid=152054715&single=true&output=csv",encoding = "utf-8")
metodos$Marca.temporal<-lubridate::dmy_hms(metodos$Marca.temporal)
metodos<- metodos%>% mutate(mes = month(metodos$Marca.temporal))
metodos_red<-metodos[,c(3,4,5,6,7,8,9)]
colnames(metodos_red)<-c("Provincia",	"Municipio/localidad",	"Levonorgestrel + Etinilestradiol (*)",	"Desogestrel (*)",	"Medroxiprogesterona",	"CHIP ISD",	"Gestodeno + Etinilestradiol (*)")
month(Sys.Date())
metodos <-metodos%>% filter(mes == month(Sys.Date()))
entradas_metodos <- nrow(metodos) #esto es para el velocimetro
if(-Inf == max(metodos$Marca.temporal)) {ultimoreg_met<-Sys.Date()-7} else{ultimoreg_met<-max(metodos$Marca.temporal)}
ultimoreg_met<-as.Date(ultimoreg_met,format="%d/%m/%Y")
asdf = seq(from =ultimoreg_met , to = Sys.Date(), by = 'day')
spam<-length(asdf)-1
### Derivaciones------------------------------
#value box
derivaciones <- read.csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vS4-N7bqVJLOsfwMdosKjkX9s9LC6Gz0KDu8qhMKHtVHP70DzDua2vWGp2dER6JQy8-LLr62vSmDBcG/pub?gid=0&single=true&output=csv", encoding = "UTF-8")
derivaciones$Fecha.corta<-dmy(derivaciones$Fecha.corta)
deriv_ult<-max(derivaciones$Fecha.corta)
deriv_u = seq(from =deriv_ult , to = Sys.Date(), by = 'day')
deriv_u<-length(deriv_u)-1
#gráfico
cant_segui<-derivaciones%>%group_by(Fecha.corta)%>%
summarise(cant=n())
if(deriv_u>=7){graf_seguifalt<-ggplot(cant_segui,mapping = aes(x=Fecha.corta, y=cant))+
geom_col(fill="#670010") +
scale_x_date("")+
scale_y_continuous("Seguimientos")
theme_classic()}else{
graf_seguifalt<-ggplot(cant_segui,mapping = aes(x=Fecha.corta, y=cant))+
geom_col(fill="#038554") +
theme_classic()+
scale_y_continuous("Seguimientos")+
scale_x_date("")
}
graf_seguifalt<- ggplotly(graf_seguifalt) %>% layout(title = "",  showlegend = F) %>%
config(modeBarButtonsToRemove=c('zoom2d', 'pan2d', 'select2d',
'lasso2d', 'zoomIn2d', 'zoomOut2d',
'autoScale2d','resetScale2d'))
graf_seguifalt <- graf_seguifalt %>% layout(title = "",  showlegend = F)
# METAS FISICAS ----------------------------
metas_anual$ejecutado_hasta <- as.numeric(metas_anual$ejecutado_hasta)
metas_anual$porc_ejec <- round(as.numeric(metas_anual$porc_ejec),4)*100
metas_trim$ejec_1_trim <- as.numeric(metas_trim$ejec_1_trim)
metas_trim$ejec_2_trim <- as.numeric(metas_trim$ejec_2_trim)
metas_trim$ejec_3_trim <- as.numeric(metas_trim$ejec_3_trim)
metas_trim$ejec_4_trim <- as.numeric(metas_trim$ejec_4_trim)
metas_trim$porc_ejec1 <- round(as.numeric(metas_trim$porc_ejec1),4)*100
metas_trim$porc_ejec2 <- round(as.numeric(metas_trim$porc_ejec2),4)*100
metas_trim$porc_ejec3 <- round(as.numeric(metas_trim$porc_ejec3),4)*100
metas_trim$porc_ejec4 <- round(as.numeric(metas_trim$porc_ejec4),4)*100
## Metas Anuales ------------------------------
metas_anual <-  metas_anual %>%
select(c("descripcion_medicion","descripcion_unidad_de_medida", "programado_acumulado_anual",
"ejecutado_hasta", "porc_ejec"))
metas_ejec <- ifelse(all(all(is.na(metas_trim$ejec_2_trim)), all(metas_trim$porc_ejec2==0)),"1er",
ifelse(all(all(is.na(metas_trim$ejec_3_trim)), all(metas_trim$porc_ejec3==0)),"2do",
ifelse(all(all(is.na(metas_trim$ejec_4_trim)), all(metas_trim$porc_ejec4==0)),
"3er","4to")))
# Calculo las sumas de las distintos trimestres para automatizar la actualización en las metas anuales.-
metas_trim <- metas_trim %>%
mutate("1er" = prog_1_trim) %>%
mutate("2do" = prog_1_trim + prog_2_trim) %>%
mutate("3er" = prog_1_trim + prog_2_trim + prog_3_trim) %>%
mutate("4to" = prog_1_trim + prog_2_trim + prog_3_trim + prog_4_trim)
metas_p_agregar <- metas_trim %>%
select("1er","2do","3er","4to")
metas_anual <- metas_anual %>%
cbind(metas_p_agregar)
metas_anual <- metas_anual %>%
select(1:5,metas_ejec) %>%
relocate(acumulado=metas_ejec,.after = programado_acumulado_anual) %>%
mutate(porc_ejec = round((ejecutado_hasta/acumulado),4)*100)
# Valores para los 3 valores de los Gauge (velocímetros)
verde <- sum(metas_anual$porc_ejec >= 90, na.rm = T)
amarillo <- sum(metas_anual$porc_ejec >=60 & metas_anual$porc_ejec < 90, na.rm = T)
rojo <- sum(metas_anual$porc_ejec < 60, na.rm = T)
## Metas Trimestrales -----------------------------------
# 1er trim
metas_trim1 <- metas_trim %>%
select("descripcion_medicion","descripcion_unidad_de_medida",
"prog_1_trim","ejec_1_trim","porc_ejec1")
# 2do trim
metas_trim2 <- metas_trim %>%
select("descripcion_medicion","descripcion_unidad_de_medida",
"prog_2_trim","ejec_2_trim","porc_ejec2")
# 3er trim
metas_trim3 <- metas_trim %>%
select("descripcion_medicion","descripcion_unidad_de_medida",
"prog_3_trim","ejec_3_trim","porc_ejec3")
# 4to trim
metas_trim4 <- metas_trim %>%
select("descripcion_medicion","descripcion_unidad_de_medida",
"prog_4_trim","ejec_4_trim","porc_ejec4")
# RESUMEN GRAFICO ---------------------------------
graf_0 <- dappt_base %>%
select(fecha, dia, mes,anio, semana, operativo,especialidad,uni_medida,cantidad)
graf_1 <- graf_0 %>%
group_by(fecha,operativo) %>%
summarise(cant= n())
#reemplazo cantidad por 1 para todos porque al agrupar me sumaba el mismo operativo varias veces ya que
#son diferentes las columnas especialidad y uni_medida
graf_1$cant <- 1
#cantidad de dias que participamos en los diferentes operativos (por tipo de operativo)
diasx_oper <- graf_1 %>%
group_by(operativo) %>%
summarise(canti= n()) %>%
mutate(operativo = fct_reorder(operativo, -canti))
## Grafico1 - torta ----------------
col_operativos <- c(  "#9367bd", "#1f77b4", "#008b8b", "#2ca02c","#f781d4", "#9c9a9a","#a4b59e",
"#17bdcf", "#57a8e2", "#d62727", "#e17f0e","#b7b81f","#bb6df2","#87ebfa","#9f46e8", "#a35f52" )
fig <- diasx_oper %>% plot_ly(labels = ~operativo, values = ~canti,
marker = list(colors = col_operativos))
fig <- fig %>% add_pie(hole = 0.3)
grafico1_plotly <- fig %>% layout(title = "",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
## Grafico 2: operativos por mes (posición fill todo al 100%).--------------------------------
operas <- dappt_base %>%
select(mes,operativo,sem_i,sem_f) %>%
dplyr::group_by(mes,operativo) %>%
unique()
unique(operas$operativo)
operas$operativo <- factor(operas$operativo,
labels = c("CARPAS SALUDABLES","DAPPTE","DICEI","EETB","ESTAR", "HAY EQUIPO", "HOSPITALES NACIONALES", "JUEGOS EVITA", "MDS", "TECNOPOLIS"))
#ggplotly(grafico2)
operas <- operas %>%
group_by(mes, operativo) %>%
summarise(cant= n())
grafico2 <- ggplot(operas, aes(mes, cant, fill=operativo)) +
geom_col(position = "fill") +
scale_fill_manual(values = col_operativos)+
labs(x = "Mes", y = "Cantidad de Operativos", fill= "Operativos",) +
scale_x_continuous (limit = c(0.5,max(operas$mes)+1), breaks= seq(0, max(operas$mes), 1))+
theme_classic()
grafico2
ggplotly(grafico2)
##Grafico 3: Persnas anual ----------------
dappt_base <- dappt_base %>%
mutate(prestaciones = paste(dappt_base$especialidad,dappt_base$descrip,
dappt_base$uni_medida, sep="  //  "))
dappt_base$prestaciones2 <-  case_when(#forma alternativa de hacer el if cuando tengo que hacer muchos if, sobretodo si es con caracter
NA ~ "Otros",
str_detect(dappt_base$prestaciones, "Casos positivos  //  Personas") ~ "Otras prestaciones",
str_detect(dappt_base$prestaciones, "Casos positivos por criterio clínico") ~ "Personas",
str_detect(dappt_base$prestaciones, "COVID-19  //  Dosis de vacunas aplicadas") ~ "Personas",
str_detect(dappt_base$prestaciones, "Personas") ~ "Personas",
TRUE ~ "Otras prestaciones"
)
dappt_base$cantidad <- as.numeric(dappt_base$cantidad)
presta <- dappt_base %>%
filter(prestaciones2 == "Personas") %>%
group_by(semana, especialidad, prestaciones2) %>%
summarise(total = sum(cantidad)) %>%
ungroup()
#para cubrir el bache de las semanas 11 a la 15 donde no hubo actividad.-
#Grafico 3: Personas atendidas totales por semana en cada especialidad
grafico3 <- ggplot(presta, aes(semana, total, fill = especialidad, ))+ #shape= especialidad
#geom_point(size = 2, alpha = 0.7, inherit.aes = T, na.rm = T)+
#scale_shape_manual(values=c(21,22,23))+
#geom_line(size = 0.5)+ #linetype = especialidad
geom_col(position = "stack",)+ #Dodge  #Fill #Identity
#geom_text(aes(label=presta_total$tot), hjust=-0.1,size = 2.8, position = "stack")+ #usar este para poner total
labs(x = "Semana", y = "Personas Atendidas", fill= "Especialidad",) + # shape = "Especialidad"
#coord_flip()+
theme_classic()
## Value boxs-------------
base_r$id_operativo
cant_op <- nrow(as.data.frame(unique(base_r$id_operativo)))#cantidad de operativos
base_r_completa_sin_susp <- base_r_completa %>% filter(estado != "Suspendido")
cant_dias_op <-nrow(base_r_completa_sin_susp)#cantidad de dias de operativos
cant_pers <- base_t %>% dplyr::filter(uni_medida == "Personas") %>%
summarise(sum(cantidad))#cantidad de participantesde los operativos
cant_espe <- unique(base_t$especialidad)
cant_espe <- matrix(cant_espe,ncol = 1)
cant_espe <-nrow(cant_espe)#cantidad de especialidades
pres_atenmedic <- base_t %>% dplyr::filter(especialidad == c("Atención médica")) %>% dplyr::filter(uni_medida == c("Personas")) %>%
summarise(sum(cantidad))
pres_enf <- base_t %>% dplyr::filter(especialidad == c("Enfermería")) %>% dplyr::filter(uni_medida == c("Prestaciones")) %>%
summarise(sum(cantidad))
pres_imag <- base_t %>% dplyr::filter(especialidad == c("Imágenes")) %>% dplyr::filter(uni_medida == c("Placas RX")) %>%
summarise(sum(cantidad))
pres_odon <- base_t %>% dplyr::filter(especialidad == c("Odontología")) %>% dplyr::filter(uni_medida == c("Prestaciones")) %>%
summarise(sum(cantidad))
pres_oft <- base_t %>% dplyr::filter(especialidad == c("Oftalmología")) %>% dplyr::filter(uni_medida == c("Lentes recetados")) %>%
summarise(sum(cantidad))
pres_prom <- base_t %>% dplyr::filter(especialidad == c("Promoción")) %>%dplyr::filter(uni_medida == c("Personas")) %>%
summarise(sum(cantidad))
pres_sment <- base_t %>% dplyr::filter(especialidad == c("Salud mental")) %>%
summarise(sum(cantidad))
pres_sment_aux <- base_t %>% dplyr::filter(especialidad == c("Salud mental")) %>% dplyr::filter(uni_medida == c("Personas")) %>%
summarise(sum(cantidad))
pres_sment <- pres_sment - pres_sment_aux
pres_test <- base_t %>% dplyr::filter(especialidad == c("Testeo COVID-19")) %>% dplyr::filter(uni_medida == c("Personas")) %>%
summarise(sum(cantidad))
prest_vac <- base_t %>% dplyr::filter(especialidad == c("Vacunación")) %>% dplyr::filter(uni_medida == c("Dosis de vacunas aplicadas")) %>%
summarise(sum(cantidad))
prest_vac_aux1 <- base_t %>% dplyr::filter(especialidad == c("Vacunación")) %>% dplyr::filter(uni_medida == c("Libretas AUH")) %>%
summarise(sum(cantidad))
prest_vac_aux2 <- base_t %>% dplyr::filter(especialidad == c("Vacunación")) %>% dplyr::filter(uni_medida == c("Calendarios completados")) %>%
summarise(sum(cantidad))
prest_vac <- prest_vac + prest_vac_aux1 + prest_vac_aux2
cant_prest <- sum(pres_atenmedic,pres_enf,pres_imag,pres_odon,pres_oft,pres_prom,pres_sment,pres_test,prest_vac)
# DATOS HISTORICOS --------------------------------------------------------
dappt_base_sem <- dappt_base %>%
group_by(id_op, semana, operativo , especialidad, descrip, uni_medida) %>%
summarise(totales = sum(cantidad, na.rm = T))
dappt_base_sem <-left_join(dappt_base_sem, op_fechas1) #le agrego las fechas de inicio y fin del operativo
dappt_base_sem<- dappt_base_sem[,c(1,8,9,2:7)]
#esta parte es para que me quede el id del operativo como id de la tabla
View(base_tus)
library(readxl)
library(lubridate)
library(tidyverse)
library(kableExtra)
library(plotly)
library(crosstalk)
library(scales)
library(tidyr)
library(openxlsx2)
library(openxlsx)
#Cargo los datos------------------------------
setwd("C:/Users/nicol/OneDrive/Documentos/R/pagina_datos")
datos_series <- read_excel("base_series.xlsx")
datos_series <- datos_series %>% mutate(dias_ult_act = as.numeric(-difftime(ultima_actualizacion, Sys.Date(), units = "days")))#saco el tiempo desde la ultima actua
datos_series <- datos_series %>% mutate(estado = "")#creo una columna vacia para el for
#es para establecer si está actualizado o desactualizado si mensual y si mas 30 días desactualizado, etc.
for(e in c(1:nrow(datos_series))){
if (datos_series[[e,9]] == "Mensual") {
if(as.numeric(datos_series[[e,17]])>30){
datos_series[e,18] <- "Desactualizado"
} else {
datos_series[e,18] <- "Actualizado"
}
} else{
if (datos_series[[e,9]] == "Anual") {
if(as.numeric(datos_series[[e,17]])>365){
datos_series[e,18] <- "Desactualizado"
} else {
datos_series[e,18] <- "Actualizado"
}
} else{
if (datos_series[[e,9]]=="Trimestral") {
if(as.numeric(datos_series[[e,17]])>90){
datos_series[e,18] <- "Desactualizado"
} else {
datos_series[e,18] <- "Actualizado"
}
}
}
}
}
#esto es para las valluebox 2
estados <- datos_series %>% group_by(estado) %>%
summarise(cant_estados = n())
act <- estados[[1,2]]
desact <- estados[[2,2]]
#tabla 1
tabla1 <- datos_series[,c(1,2,4,9,14,16,17,18)]
tabla1 <- tabla1%>% mutate(dias_ult_dat= as.numeric(-difftime(as.Date(fecha_ult_dato,format = "%Y-%m-%d"), Sys.Date(), units = "days")))
tabla1$ultima_actualizacion <- as.Date(tabla1$ultima_actualizacion, format = "%Y-%m-%d")
sd <- SharedData$new(tabla1)
#grafico 1
#esta parte es de juguete hasta que armemos bien como hacerlo
hoy <- Sys.Date()
inicio <- as.Date("2023-01-01")
dias <- seq.Date(inicio, hoy, by = "day")
# Determinar la cantidad de días
n_dias <- length(dias)
# Crear una secuencia de 0s y 1s-4s de manera que 50% de los datos sean 0s
valores <- c(rep(0, round(n_dias/2+0.1)), sample(1:4, n_dias/2, replace = TRUE))
# Crear el dataframe
df2 <- data.frame(dias = dias, valores = valores)
# Revolver las filas del data frame para que los 0s no estén todos juntos
set.seed(123)  # Para reproducibilidad
df2 <- df2[sample(nrow(df2)),]
df2$dias <- as.Date(df2$dias)
df2$id_serie <- sample(1:9, nrow(df2), replace = TRUE)
df2 <- SharedData$new(df2)
if(desact>0){graf_act<-ggplot(df2,mapping = aes(x=dias, y=valores))+
geom_col(fill="#f36b39") +
scale_x_date("")+
scale_y_continuous("Actualizaciones")
theme_classic()}else{
graf_act<-ggplot(df2,mapping = aes(x=dias, y=valores))+
geom_col(fill="#42cdff") +
theme_classic()+
scale_y_continuous("Actualizaciones")+
scale_x_date("")
}
graf_act<- ggplotly(graf_act) %>% layout(title = "",  showlegend = F) %>%
config(modeBarButtonsToRemove=c('zoom2d', 'pan2d', 'select2d',
'lasso2d', 'zoomIn2d', 'zoomOut2d',
'autoScale2d','resetScale2d'))
graf_act <- graf_act %>% layout(title = "",  showlegend = F)
#invento un numero de errores para poder hacer el tablero
errores <- 3
#grafico 2 erorres
hoy <- Sys.Date()
inicio <- as.Date("2023-04-01")
dias <- seq.Date(inicio, hoy, by = "day")
# Determinar la cantidad de días
n_dias <- length(dias)
# Crear una secuencia de 0s y 1s-4s de manera que 50% de los datos sean 0s
tipo_de_error <- c(rep(0, round(n_dias/2+0.1)), sample(0:5, n_dias/2, replace = TRUE))
# Crear el dataframe
df3 <- data.frame(dias = dias, id_error = tipo_de_error)
# Revolver las filas del data frame para que los 0s no estén todos juntos
set.seed(123)  # Para reproducibilidad
df3 <- df3[sample(nrow(df3)),]
df3$id_serie <- sample(1:9, nrow(df3), replace = TRUE)
df3$cant_errores <- sample(0:7, nrow(df3), replace = TRUE)
base_errores <- data.frame(Tipo_de_error = c("Modificación de antiguos valores","NA inesperados", "Modificación de estructura", "Archivo ilegible","Error proceso de carga"), id_error = c(1,2,3,4,5))
df3 <- SharedData$new(df3)
if(errores>5){graf_errores<-ggplot(df3,mapping = aes(x=dias, y= cant_errores ))+
geom_area(fill="#f36b39") +
scale_x_date("")+
scale_y_discrete("Errores")
theme_classic()}else{
graf_errores<-ggplot(df3,mapping = aes(x=dias, y=cant_errores ))+
geom_area(fill="#42cdff") +
theme_classic()+
scale_y_discrete("Errores")+
scale_x_date("")
}
#Grafico de errores 3
if(errores>3){col_operativos <- c( "#f36b39","#ff8478",  "#9c9a9a", "#a35f52", "#f781d4", "#2ca02c","#f781d4", "#9c9a9a","#a4b59e",
"#17bdcf", "#57a8e2", "#bb6df2" )}else{
col_operativos <- c( "#42cdff","#adf7db",  "#adf7db", "#adf7db", "#adf7db", "#9cb8ad","#adf7db", "#9cb8ad","#adf7db",
"#9cb8ad","#adf7db", "#bb6df2" )}
cant_falt <- cant_falt[order(cant_falt$cant,decreasing = TRUE), ]
View(base_errores)
View(df3)
View(df3)
hoy <- Sys.Date()
inicio <- as.Date("2023-04-01")
dias <- seq.Date(inicio, hoy, by = "day")
# Determinar la cantidad de días
n_dias <- length(dias)
# Crear una secuencia de 0s y 1s-4s de manera que 50% de los datos sean 0s
tipo_de_error <- c(rep(0, round(n_dias/2+0.1)), sample(0:5, n_dias/2, replace = TRUE))
# Crear el dataframe
df3 <- data.frame(dias = dias, id_error = tipo_de_error)
# Crear el dataframe
df3 <- data.frame(dias = dias, id_error = tipo_de_error)
# Revolver las filas del data frame para que los 0s no estén todos juntos
set.seed(123)  # Para reproducibilidad
df3 <- df3[sample(nrow(df3)),]
df3$id_serie <- sample(1:9, nrow(df3), replace = TRUE)
df3$cant_errores <- sample(0:7, nrow(df3), replace = TRUE)
base_errores <- data.frame(Tipo_de_error = c("Modificación de antiguos valores","NA inesperados", "Modificación de estructura", "Archivo ilegible","Error proceso de carga"), id_error = c(1,2,3,4,5))
View(df3)
write.xlsx(df3,"df3.xlsx")
View(datos_series)
df3 <- read_excel("df3.xlsx")
View(df3)
df3 <- left_join(df3,base_errores)
View(df3)
base_errores <- data.frame(Tipo_de_error = c("Sin errores registrados","Modificación de antiguos valores","NA inesperados", "Modificación de estructura", "Archivo ilegible","Error proceso de carga"), id_error = c(0,1,2,3,4,5))
df3 <- left_join(df3,base_errores)
View(base_errores)
View(df3)
df3 <- read_excel("df3.xlsx")
base_errores <- data.frame(Tipo_de_error = c("Sin errores registrados","Modificación de antiguos valores","NA inesperados", "Modificación de estructura", "Archivo ilegible","Error proceso de carga"), id_error = c(0,1,2,3,4,5))
df3 <- left_join(df3,base_errores)
View(df3)
df3 <- SharedData$new(df3)
df3 <- read_excel("df3.xlsx")
base_errores <- data.frame(Tipo_de_error = c("Sin errores registrados","Modificación de antiguos valores","NA inesperados", "Modificación de estructura", "Archivo ilegible","Error proceso de carga"), id_error = c(0,1,2,3,4,5))
df3 <- left_join(df3,base_errores)
library(readxl)
library(lubridate)
library(tidyverse)
library(kableExtra)
library(plotly)
library(crosstalk)
library(scales)
library(tidyr)
library(openxlsx2)
library(openxlsx)
library(shiny)
#Cargo los datos------------------------------
setwd("C:/Users/nicol/OneDrive/Documentos/R/pagina_datos")
datos_series <- read_excel("base_series.xlsx")
datos_series <- datos_series %>% mutate(dias_ult_act = as.numeric(-difftime(ultima_actualizacion, Sys.Date(), units = "days")))#saco el tiempo desde la ultima actua
datos_series <- datos_series %>% mutate(estado = "")#creo una columna vacia para el for
#es para establecer si está actualizado o desactualizado si mensual y si mas 30 días desactualizado, etc.
for(e in c(1:nrow(datos_series))){
if (datos_series[[e,9]] == "Mensual") {
if(as.numeric(datos_series[[e,17]])>30){
datos_series[e,18] <- "Desactualizado"
} else {
datos_series[e,18] <- "Actualizado"
}
} else{
if (datos_series[[e,9]] == "Anual") {
if(as.numeric(datos_series[[e,17]])>365){
datos_series[e,18] <- "Desactualizado"
} else {
datos_series[e,18] <- "Actualizado"
}
} else{
if (datos_series[[e,9]]=="Trimestral") {
if(as.numeric(datos_series[[e,17]])>90){
datos_series[e,18] <- "Desactualizado"
} else {
datos_series[e,18] <- "Actualizado"
}
}
}
}
}
#esto es para las valluebox 2
estados <- datos_series %>% group_by(estado) %>%
summarise(cant_estados = n())
act <- estados[[1,2]]
desact <- estados[[2,2]]
#tabla 1
tabla1 <- datos_series[,c(1,4,6,9,14,16,17,18)]
tabla1 <- tabla1%>% mutate(dias_ult_dat= as.numeric(-difftime(as.Date(fecha_ult_dato,format = "%Y-%m-%d"), Sys.Date(), units = "days")))
tabla1$ultima_actualizacion <- as.Date(tabla1$ultima_actualizacion, format = "%Y-%m-%d")
sd <- SharedData$new(tabla1)
#grafico 1
#esta parte es de juguete hasta que armemos bien como hacerlo
hoy <- Sys.Date()
inicio <- as.Date("2023-01-01")
dias <- seq.Date(inicio, hoy, by = "day")
# Determinar la cantidad de días
n_dias <- length(dias)
# Crear una secuencia de 0s y 1s-4s de manera que 50% de los datos sean 0s
valores <- c(rep(0, round(n_dias/2+0.1)), sample(1:4, n_dias/2, replace = TRUE))
# Crear el dataframe
df2 <- data.frame(dias = dias, valores = valores)
# Revolver las filas del data frame para que los 0s no estén todos juntos
set.seed(123)  # Para reproducibilidad
df2 <- df2[sample(nrow(df2)),]
df2$dias <- as.Date(df2$dias)
df2$id_serie <- sample(1:9, nrow(df2), replace = TRUE)
df2 <- SharedData$new(df2)
if(desact>0){graf_act<-ggplot(df2,mapping = aes(x=dias, y=valores))+
geom_col(fill="#f36b39") +
scale_x_date("")+
scale_y_continuous("Actualizaciones")
theme_classic()}else{
graf_act<-ggplot(df2,mapping = aes(x=dias, y=valores))+
geom_col(fill="#42cdff") +
theme_classic()+
scale_y_continuous("Actualizaciones")+
scale_x_date("")
}
graf_act<- ggplotly(graf_act) %>% layout(title = "",  showlegend = F) %>%
config(modeBarButtonsToRemove=c('zoom2d', 'pan2d', 'select2d',
'lasso2d', 'zoomIn2d', 'zoomOut2d',
'autoScale2d','resetScale2d'))
graf_act <- graf_act %>% layout(title = "",  showlegend = F)
#invento un numero de errores para poder hacer el tablero
errores <- 3
#grafico 2 erorres
df3 <- read_excel("df3.xlsx")
base_errores <- data.frame(Tipo_de_error = c("Sin errores registrados","Modificación de antiguos valores","NA inesperados", "Modificación de estructura", "Archivo ilegible","Error proceso de carga"), id_error = c(0,1,2,3,4,5))
df3 <- left_join(df3,base_errores)
df3 <- SharedData$new(df3)
# Simulando el data frame
set.seed(123)
df <- data.frame(
fecha = as.Date('2023-01-01') + 0:364,
id_serie = sample(c('Serie A', 'Serie B', 'Serie C'), 365, replace = TRUE),
tipo_de_error = sample(c('Error 1', 'Error 2', 'Error 3'), 365, replace = TRUE),
error = sample(c(TRUE, FALSE), 365, replace = TRUE)
)
# Server logic: Crea una gráfica reactiva
renderPlot({
# Filtrar data frame basado en el input
df_filtrado <- df %>%
filter(id_serie == input$id_serie) %>%
filter(error == TRUE)
# Crear gráfico
grafico3 <- ggplot(df_filtrado, aes(x = fecha)) +
geom_bar() +
theme_minimal() +
labs(title = "Número de errores por día",
x = "Fecha", y = "Número de errores") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
source("stats_tablero_pagina.R")
source("dappt_statsn.R")
runApp('~/R/pagina_datos/shiny_tablero.R')
runApp('~/R/pagina_datos/shiny_tablero.R')
runApp('~/R/pagina_datos/shiny_tablero.R')
runApp('~/R/pagina_datos/shiny_tablero.R')
shiny::runApp()
